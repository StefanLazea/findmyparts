{"version":3,"sources":["pages/home/Home.js","pages/parts/Parts.js","pages/auth/AuthPage.js","pages/auth/Register.js","pages/auth/Login.js","components/navigation-bar/NavigationBar.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Home","props","inputRef","useRef","useState","imgSrc","setImgSrc","uploadFileName","setUploadFileName","className","Image","src","width","height","rounded","ref","type","onChange","ev","fileUploaded","target","files","name","URL","createObjectURL","console","log","Button","onClick","current","click","Parts","columns","label","dataList","setDataList","cardsView","setCardsView","useEffect","axios","get","then","response","data","TableView","Table","striped","bordered","hover","map","column","item","code","stock","id","CardsView","variant","AuthPage","history","useHistory","push","Register","Login","handleLogin","post","token","tokenId","res","message","localStorage","setItem","toast","clientId","buttonText","onSuccess","onFailure","cookiePolicy","NavigationBar","Navbar","collapseOnSelect","expand","bg","Container","Brand","href","Toggle","Collapse","Nav","Link","eventKey","triggerLogOut","configure","App","isAuth","setIsAuth","to","getItem","exact","path","component","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","a","counterSlice","createSlice","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed3a030e.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './Home.scss'\nimport { Image, Button } from 'react-bootstrap';\nexport const Home = (props) => {\n    const inputRef = useRef();\n    const [imgSrc, setImgSrc] = useState(\"https://via.placeholder.com/300\")\n    const [uploadFileName, setUploadFileName] = useState(\"\")\n    const handleUpload = () => {\n        inputRef.current?.click()\n    }\n    const handleChange = (ev) => {\n        const fileUploaded = ev.target.files[0];\n        setUploadFileName(fileUploaded.name)\n        setImgSrc(URL.createObjectURL(fileUploaded))\n        console.log(fileUploaded)\n\n    }\n    return (\n        <div className=\"home-page\">\n            <div className=\"image-view\">\n                <Image src={imgSrc} width={300} height={300} rounded />\n\n                <div className='upload-input'>\n                    <input ref={inputRef} className=\"input\" type=\"file\" onChange={handleChange} />\n                    <Button onClick={handleUpload}>Upload</Button>\n                    <div className=\"file-label\">{uploadFileName}</div>\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Table, Button } from 'react-bootstrap';\nimport { MdTableRows, MdGridView } from \"react-icons/md\";\nimport './Parts.scss';\nexport const Parts = (props) => {\n    const columns = [\n        { name: 'id', label: 'Id' },\n        { name: 'partNumber', label: 'Part number' },\n        { name: 'stock', label: 'Stock' },\n    ]\n    const [dataList, setDataList] = useState([])\n    const [cardsView, setCardsView] = useState(false)\n\n    useEffect(() => {\n        axios.get('http://localhost:3005/api/parts').then(response => { setDataList(response.data) })\n    }, []);\n    const TableView = () => {\n        return <Table striped bordered hover>\n            <thead>\n                <tr>\n                    {columns.map(column => {\n                        return <th key={column.name}>{column.label}</th>\n                    })}\n\n                </tr>\n            </thead>\n            <tbody>\n                {dataList.map(item => {\n                    return <tr key={item.id}>\n                        <td>{item.name}</td>\n                        <td>{item.code}</td>\n                        <td>{item.stock}</td>\n                    </tr>\n                }\n                )}\n\n            </tbody>\n        </Table>\n\n    }\n    const CardsView = () => {\n        return <div></div>\n    }\n    return (\n        <div className=\"parts-page\">\n            <div className=\"switch-button\">\n                <Button variant=\"link\" onClick={() => setCardsView(true)}><MdGridView /></Button>{' '}\n                <Button variant=\"link\" onClick={() => setCardsView(false)}><MdTableRows /></Button>{' '}\n            </div>\n            {cardsView ? <CardsView /> : <TableView />}\n        </div>\n    );\n}\n\n","import React from 'react';\n\nimport { Button, } from 'react-bootstrap';\nimport { useHistory } from 'react-router-dom';\n\nexport const AuthPage = (props) => {\n    const history = useHistory();\n    return <>\n        <div>Auth page</div>\n        <Button variant=\"outline-primary\" onClick={() => history.push('/register')}>Switch to register</Button>\n    </>;\n}\n\n","import React from 'react';\nexport const Register = (props) => {\n    return (\n        <div>Register</div>\n    );\n}\n\n","import React from 'react';\nimport { GoogleLogin } from 'react-google-login';\nimport { toast } from 'react-toastify';\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nexport const Login = (props) => {\n    let history = useHistory();\n\n    const handleLogin = (response) => {\n        console.log('googleData', response);\n        axios.post(\"http://localhost:3005/api/auth/google\", {\n\n            token: response.tokenId\n        }, {\n            \"Content-Type\": \"application/json\"\n        }\n        ).then((res) => {\n            console.log({ res })\n            if (res.data.message === 'Success') {\n                localStorage.setItem('token', res.data.token)\n                history.push('/')\n            }\n            toast(res.data.message);\n        });\n\n    }\n    return (\n        <GoogleLogin\n            clientId=\"142016303094-jsoj7h3eeavgf9ne9ij9ugb6k48m9qa2.apps.googleusercontent.com\"\n            buttonText=\"Log in with Google\"\n            onSuccess={(response) => handleLogin(response)}\n            onFailure={(response) => handleLogin(response)}\n            cookiePolicy={'single_host_origin'}\n        />\n    );\n}\n\n","import React from 'react';\nimport { Navbar, Nav, Container } from 'react-bootstrap';\n\nexport const NavigationBar = (props) => {\n\n\n    return (\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Container>\n                <Navbar.Brand href=\"/\">Cauta piesa</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav>\n                        <Nav.Link href=\"/\">Acasa</Nav.Link>\n                        <Nav.Link eventKey={2} href=\"/parts\">Piese</Nav.Link>\n                        <Nav.Link eventKey={3} href=\"/login\">Login</Nav.Link>\n                        <Nav.Link eventKey={3} onClick={() => props.triggerLogOut()}>Log out</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Container >\n        </Navbar >\n    );\n}\n\n","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  useHistory,\n  Redirect\n} from \"react-router-dom\";\n\nimport { Home } from './pages/home/Home';\nimport { Parts } from './pages/parts/Parts'\nimport { AuthPage } from './pages/auth/AuthPage';\nimport { Register } from './pages/auth/Register';\nimport { Login } from './pages/auth/Login';\nimport { Container } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { NavigationBar } from './components/navigation-bar/NavigationBar';\nimport './App.scss';\nimport 'react-toastify/dist/ReactToastify.css';\ntoast.configure();\n\nfunction App() {\n  const [isAuth, setIsAuth] = useState(true);\n\n  const triggerLogOut = () => {\n    console.log('aici', localStorage.getItem('token'))\n    if (!localStorage.getItem('token')) {\n      setIsAuth(false)\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      {!isAuth && <Redirect to='/login' />}\n      {isAuth && <NavigationBar triggerLogOut={triggerLogOut} />}\n      <Container className='page-container' >\n        <Router>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/parts\" component={Parts} />\n          <Route path=\"/cars\" component={Parts} />\n          <Route path=\"/papers\" component={Parts} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/auth\" component={AuthPage} />\n          <Route path=\"/login\" component={Login} />\n        </Router>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}